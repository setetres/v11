$grid-columns: 12;
$grid-gutter-width: 2.5vw;

$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1700px
);

$container-max-widths: (
    xxl: 1600px
);

@include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
@include _assert-starts-at-zero($grid-breakpoints);
@include _assert-ascending($container-max-widths, '$container-max-widths');

//

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    %grid-column {
        padding-left: $gutter / 2;
        padding-right: $gutter / 2;
        position: relative;
        width: 100%;
    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @for $i from 1 through $columns {
            .ooo-col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }

        .ooo-col#{$infix},
        .ooo-col#{$infix}-auto {
            @extend %grid-column;
        }

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            .ooo-col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .ooo-col#{$infix}-auto {
                flex: 0 0 auto;
                max-width: 100%;
                width: auto;
            }

            @for $i from 1 through $columns {
                .ooo-col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }

            .ooo-order#{$infix}-first {
                order: -1;
            }

            .ooo-order#{$infix}-last {
                order: $columns + 1;
            }

            @for $i from 0 through $columns {
                .ooo-order#{$infix}-#{$i} {
                    order: $i;
                }
            }

            @for $i from 0 through ($columns - 1) {
                @if not ($infix == '' and $i == 0) {
                    .ooo-offset#{$infix}-#{$i} {
                        @include make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}

//

@mixin make-container($gutter: $grid-gutter-width) {
    margin-left: auto;
    margin-right: auto;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
    // width: 100%;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

@mixin make-row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-left: -($gutter / 2);
    margin-right: -($gutter / 2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
    position: relative;
    // width: 100%;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;

    margin-left: if($num == 0, 0, percentage($num));
}
